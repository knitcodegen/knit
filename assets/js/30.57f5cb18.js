(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{427:function(e,t,a){"use strict";a.r(t);var s=a(56),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"reflection-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reflection-functions"}},[e._v("#")]),e._v(" Reflection Functions")]),e._v(" "),a("p",[e._v("Sprig provides rudimentary reflection tools. These help advanced template\ndevelopers understand the underlying Go type information for a particular value.")]),e._v(" "),a("p",[e._v("Go has several primitive "),a("em",[e._v("kinds")]),e._v(", like "),a("code",[e._v("string")]),e._v(", "),a("code",[e._v("slice")]),e._v(", "),a("code",[e._v("int64")]),e._v(", and "),a("code",[e._v("bool")]),e._v(".")]),e._v(" "),a("p",[e._v("Go has an open "),a("em",[e._v("type")]),e._v(" system that allows developers to create their own types.")]),e._v(" "),a("p",[e._v("Sprig provides a set of functions for each.")]),e._v(" "),a("h2",{attrs:{id:"kind-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kind-functions"}},[e._v("#")]),e._v(" Kind Functions")]),e._v(" "),a("p",[e._v("There are two Kind functions: "),a("code",[e._v("kindOf")]),e._v(" returns the kind of an object.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('kindOf "hello"\n')])])]),a("p",[e._v("The above would return "),a("code",[e._v("string")]),e._v(". For simple tests (like in "),a("code",[e._v("if")]),e._v(" blocks), the\n"),a("code",[e._v("kindIs")]),e._v(" function will let you verify that a value is a particular kind:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('kindIs "int" 123\n')])])]),a("p",[e._v("The above will return "),a("code",[e._v("true")])]),e._v(" "),a("h2",{attrs:{id:"type-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#type-functions"}},[e._v("#")]),e._v(" Type Functions")]),e._v(" "),a("p",[e._v("Types are slightly harder to work with, so there are three different functions:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("typeOf")]),e._v(" returns the underlying type of a value: "),a("code",[e._v("typeOf $foo")])]),e._v(" "),a("li",[a("code",[e._v("typeIs")]),e._v(" is like "),a("code",[e._v("kindIs")]),e._v(", but for types: "),a("code",[e._v('typeIs "*io.Buffer" $myVal')])]),e._v(" "),a("li",[a("code",[e._v("typeIsLike")]),e._v(" works as "),a("code",[e._v("typeIs")]),e._v(", except that it also dereferences pointers.")])]),e._v(" "),a("p",[a("strong",[e._v("Note:")]),e._v(" None of these can test whether or not something implements a given\ninterface, since doing so would require compiling the interface in ahead of time.")]),e._v(" "),a("h2",{attrs:{id:"deepequal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deepequal"}},[e._v("#")]),e._v(" deepEqual")]),e._v(" "),a("p",[a("code",[e._v("deepEqual")]),e._v(" returns true if two values are "),a("a",{attrs:{href:"https://golang.org/pkg/reflect/#DeepEqual",target:"_blank",rel:"noopener noreferrer"}},[e._v('"deeply equal"'),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("Works for non-primitive types as well (compared to the built-in "),a("code",[e._v("eq")]),e._v(").")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("deepEqual (list 1 2 3) (list 1 2 3)\n")])])]),a("p",[e._v("The above will return "),a("code",[e._v("true")])])])}),[],!1,null,null,null);t.default=r.exports}}]);