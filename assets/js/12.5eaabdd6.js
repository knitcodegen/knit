(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{409:function(t,n,e){"use strict";e.r(n);var a=e(56),s=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"embedding"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#embedding"}},[t._v("#")]),t._v(" Embedding")]),t._v(" "),e("p",[t._v("With "),e("code",[t._v("knit")]),t._v(" you can embed code generators directly in your code files. This is a great option if your system needs supplemental components generated from a part of your schema.")]),t._v(" "),e("h2",{attrs:{id:"annotations"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#annotations"}},[t._v("#")]),t._v(" Annotations")]),t._v(" "),e("p",[t._v("Embedding "),e("code",[t._v("knit")]),t._v(" code generators starts with annotations. Annotations are used to identify code generator options and the output location of the generated code.")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Annotation")]),t._v(" "),e("th",[t._v("Purpose")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("code",[t._v("@knit <option> <value>")])]),t._v(" "),e("td",[t._v("Options")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("@+knit")])]),t._v(" "),e("td",[t._v("Generated Code / Begin")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("@!knit")])]),t._v(" "),e("td",[t._v("Generated Code / End")])])])]),t._v(" "),e("p",[t._v("It takes a combination of both option annotations and begin/end annotations to successfully use knit to insert generated code into a file.")]),t._v(" "),e("p",[e("code",[t._v("knit")]),t._v(" is capable of inserting generated code into any file, no matter the language or type, as long as that file supports comments where the options can be defined.")]),t._v(" "),e("p",[t._v("Here's an example of annotations in action:")]),t._v(" "),e("p",[t._v("example.ts:")]),t._v(" "),e("div",{staticClass:"language-ts extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/*\n  @knit input ./sizes.yml\n  @knit template tmpl`\n    enum Sizes {\n    {{ range $k, $v := .Sizes }} \n      {{ $k }} = "$v",\n    {{ end }}\n    }\n  ` \n*/')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// @+knit")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// @!knit")]),t._v("\n")])])]),e("p",[t._v("Running "),e("code",[t._v("knit example.ts")]),t._v(" produces the following:")]),t._v(" "),e("div",{staticClass:"language-ts extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/*\n  @knit input ./sizes.yml\n  @knit template tmpl`\n    enum Sizes {\n    {{ range $k, $v := .Sizes }} \n      {{ $k }} = "$v",\n    {{ end }}\n    }\n  ` \n*/')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// @+knit")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" Sizes "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Small "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"small"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    Medium "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"medium"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    Large "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"large"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// @!knit")]),t._v("\n")])])]),e("h2",{attrs:{id:"option-annotations"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#option-annotations"}},[t._v("#")]),t._v(" Option Annotations")]),t._v(" "),e("p",[t._v("Options are defined on the opening annotations in the following format:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("@knit <option> <value>\n")])])]),e("p",[t._v("All annotated options support environment variable expansion. All "),e("code",[t._v("$env")]),t._v(" variables starting with "),e("code",[t._v("$")]),t._v(" will be expanded before the option line is parsed.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("@knit input $OPENAPI_SPEC\n")])])]),e("h2",{attrs:{id:"codegen-annotations"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#codegen-annotations"}},[t._v("#")]),t._v(" Codegen Annotations")]),t._v(" "),e("p",[t._v("The location in which the generated code is inserted into a code file is dictated by the open/close knit annotations:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// @+knit\n  < code is generated here >\n// @!knit\n")])])])])}),[],!1,null,null,null);n.default=s.exports}}]);