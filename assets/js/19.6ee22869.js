(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{416:function(e,t,a){"use strict";a.r(t);var s=a(56),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"default-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#default-functions"}},[e._v("#")]),e._v(" Default Functions")]),e._v(" "),a("p",[e._v("Sprig provides tools for setting default values for templates.")]),e._v(" "),a("h2",{attrs:{id:"default"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#default"}},[e._v("#")]),e._v(" default")]),e._v(" "),a("p",[e._v("To set a simple default value, use "),a("code",[e._v("default")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('default "foo" .Bar\n')])])]),a("p",[e._v("In the above, if "),a("code",[e._v(".Bar")]),e._v(" evaluates to a non-empty value, it will be used. But if\nit is empty, "),a("code",[e._v("foo")]),e._v(" will be returned instead.")]),e._v(" "),a("p",[e._v('The definition of "empty" depends on type:')]),e._v(" "),a("ul",[a("li",[e._v("Numeric: 0")]),e._v(" "),a("li",[e._v('String: ""')]),e._v(" "),a("li",[e._v("Lists: "),a("code",[e._v("[]")])]),e._v(" "),a("li",[e._v("Dicts: "),a("code",[e._v("{}")])]),e._v(" "),a("li",[e._v("Boolean: "),a("code",[e._v("false")])]),e._v(" "),a("li",[e._v("And always "),a("code",[e._v("nil")]),e._v(" (aka null)")])]),e._v(" "),a("p",[e._v("For structs, there is no definition of empty, so a struct will never return the\ndefault.")]),e._v(" "),a("h2",{attrs:{id:"empty"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#empty"}},[e._v("#")]),e._v(" empty")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("empty")]),e._v(" function returns "),a("code",[e._v("true")]),e._v(" if the given value is considered empty, and\n"),a("code",[e._v("false")]),e._v(" otherwise. The empty values are listed in the "),a("code",[e._v("default")]),e._v(" section.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("empty .Foo\n")])])]),a("p",[e._v("Note that in Go template conditionals, emptiness is calculated for you. Thus,\nyou rarely need "),a("code",[e._v("if empty .Foo")]),e._v(". Instead, just use "),a("code",[e._v("if .Foo")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"coalesce"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#coalesce"}},[e._v("#")]),e._v(" coalesce")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("coalesce")]),e._v(" function takes a list of values and returns the first non-empty\none.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("coalesce 0 1 2\n")])])]),a("p",[e._v("The above returns "),a("code",[e._v("1")]),e._v(".")]),e._v(" "),a("p",[e._v("This function is useful for scanning through multiple variables or values:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('coalesce .name .parent.name "Matt"\n')])])]),a("p",[e._v("The above will first check to see if "),a("code",[e._v(".name")]),e._v(" is empty. If it is not, it will return\nthat value. If it "),a("em",[e._v("is")]),e._v(" empty, "),a("code",[e._v("coalesce")]),e._v(" will evaluate "),a("code",[e._v(".parent.name")]),e._v(" for emptiness.\nFinally, if both "),a("code",[e._v(".name")]),e._v(" and "),a("code",[e._v(".parent.name")]),e._v(" are empty, it will return "),a("code",[e._v("Matt")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"all"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#all"}},[e._v("#")]),e._v(" all")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("all")]),e._v(" function takes a list of values and returns true if all values are non-empty.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("all 0 1 2\n")])])]),a("p",[e._v("The above returns "),a("code",[e._v("false")]),e._v(".")]),e._v(" "),a("p",[e._v("This function is useful for evaluating multiple conditions of variables or values:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('all (eq .Request.TLS.Version 0x0304) (.Request.ProtoAtLeast 2 0) (eq .Request.Method "POST")\n')])])]),a("p",[e._v("The above will check http.Request is POST with tls 1.3 and http/2.")]),e._v(" "),a("h2",{attrs:{id:"any"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#any"}},[e._v("#")]),e._v(" any")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("any")]),e._v(" function takes a list of values and returns true if any value is non-empty.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("any 0 1 2\n")])])]),a("p",[e._v("The above returns "),a("code",[e._v("true")]),e._v(".")]),e._v(" "),a("p",[e._v("This function is useful for evaluating multiple conditions of variables or values:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('any (eq .Request.Method "GET") (eq .Request.Method "POST") (eq .Request.Method "OPTIONS")\n')])])]),a("p",[e._v("The above will check http.Request method is one of GET/POST/OPTIONS.")]),e._v(" "),a("h2",{attrs:{id:"fromjson-mustfromjson"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fromjson-mustfromjson"}},[e._v("#")]),e._v(" fromJson, mustFromJson")]),e._v(" "),a("p",[a("code",[e._v("fromJson")]),e._v(" decodes a JSON document into a structure. If the input cannot be decoded as JSON the function will return an empty string.\n"),a("code",[e._v("mustFromJson")]),e._v(" will return an error in case the JSON is invalid.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('fromJson "{\\"foo\\": 55}"\n')])])]),a("h2",{attrs:{id:"tojson-musttojson"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tojson-musttojson"}},[e._v("#")]),e._v(" toJson, mustToJson")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("toJson")]),e._v(" function encodes an item into a JSON string. If the item cannot be converted to JSON the function will return an empty string.\n"),a("code",[e._v("mustToJson")]),e._v(" will return an error in case the item cannot be encoded in JSON.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("toJson .Item\n")])])]),a("p",[e._v("The above returns JSON string representation of "),a("code",[e._v(".Item")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"toprettyjson-musttoprettyjson"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#toprettyjson-musttoprettyjson"}},[e._v("#")]),e._v(" toPrettyJson, mustToPrettyJson")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("toPrettyJson")]),e._v(" function encodes an item into a pretty (indented) JSON string.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("toPrettyJson .Item\n")])])]),a("p",[e._v("The above returns indented JSON string representation of "),a("code",[e._v(".Item")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"torawjson-musttorawjson"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#torawjson-musttorawjson"}},[e._v("#")]),e._v(" toRawJson, mustToRawJson")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("toRawJson")]),e._v(" function encodes an item into JSON string with HTML characters unescaped.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("toRawJson .Item\n")])])]),a("p",[e._v("The above returns unescaped JSON string representation of "),a("code",[e._v(".Item")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"ternary"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ternary"}},[e._v("#")]),e._v(" ternary")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("ternary")]),e._v(" function takes two values, and a test value. If the test value is\ntrue, the first value will be returned. If the test value is empty, the second\nvalue will be returned. This is similar to the c ternary operator.")]),e._v(" "),a("h3",{attrs:{id:"true-test-value"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#true-test-value"}},[e._v("#")]),e._v(" true test value")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('ternary "foo" "bar" true\n')])])]),a("p",[e._v("or")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('true | ternary "foo" "bar"\n')])])]),a("p",[e._v("The above returns "),a("code",[e._v('"foo"')]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"false-test-value"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#false-test-value"}},[e._v("#")]),e._v(" false test value")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('ternary "foo" "bar" false\n')])])]),a("p",[e._v("or")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('false | ternary "foo" "bar"\n')])])]),a("p",[e._v("The above returns "),a("code",[e._v('"bar"')]),e._v(".")])])}),[],!1,null,null,null);t.default=r.exports}}]);