(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{428:function(e,a,o){"use strict";o.r(a);var r=o(56),s=Object(r.a)({},(function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"semantic-version-functions"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#semantic-version-functions"}},[e._v("#")]),e._v(" Semantic Version Functions")]),e._v(" "),o("p",[e._v("Some version schemes are easily parseable and comparable. Sprig provides functions\nfor working with "),o("a",{attrs:{href:"http://semver.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("SemVer 2"),o("OutboundLink")],1),e._v(" versions.")]),e._v(" "),o("h2",{attrs:{id:"semver"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#semver"}},[e._v("#")]),e._v(" semver")]),e._v(" "),o("p",[e._v("The "),o("code",[e._v("semver")]),e._v(" function parses a string into a Semantic Version:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('$version := semver "1.2.3-alpha.1+123"\n')])])]),o("p",[o("em",[e._v("If the parser fails, it will cause template execution to halt with an error.")])]),e._v(" "),o("p",[e._v("At this point, "),o("code",[e._v("$version")]),e._v(" is a pointer to a "),o("code",[e._v("Version")]),e._v(" object with the following\nproperties:")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("$version.Major")]),e._v(": The major number ("),o("code",[e._v("1")]),e._v(" above)")]),e._v(" "),o("li",[o("code",[e._v("$version.Minor")]),e._v(": The minor number ("),o("code",[e._v("2")]),e._v(" above)")]),e._v(" "),o("li",[o("code",[e._v("$version.Patch")]),e._v(": The patch number ("),o("code",[e._v("3")]),e._v(" above)")]),e._v(" "),o("li",[o("code",[e._v("$version.Prerelease")]),e._v(": The prerelease ("),o("code",[e._v("alpha.1")]),e._v(" above)")]),e._v(" "),o("li",[o("code",[e._v("$version.Metadata")]),e._v(": The build metadata ("),o("code",[e._v("123")]),e._v(" above)")]),e._v(" "),o("li",[o("code",[e._v("$version.Original")]),e._v(": The original version as a string")])]),e._v(" "),o("p",[e._v("Additionally, you can compare a "),o("code",[e._v("Version")]),e._v(" to another "),o("code",[e._v("version")]),e._v(" using the "),o("code",[e._v("Compare")]),e._v("\nfunction:")]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('semver "1.4.3" | (semver "1.2.3").Compare\n')])])]),o("p",[e._v("The above will return "),o("code",[e._v("-1")]),e._v(".")]),e._v(" "),o("p",[e._v("The return values are:")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("-1")]),e._v(" if the given semver is greater than the semver whose "),o("code",[e._v("Compare")]),e._v(" method was called")]),e._v(" "),o("li",[o("code",[e._v("1")]),e._v(" if the version who's "),o("code",[e._v("Compare")]),e._v(" function was called is greater.")]),e._v(" "),o("li",[o("code",[e._v("0")]),e._v(" if they are the same version")])]),e._v(" "),o("p",[e._v("(Note that in SemVer, the "),o("code",[e._v("Metadata")]),e._v(" field is not compared during version\ncomparison operations.)")]),e._v(" "),o("h2",{attrs:{id:"semvercompare"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#semvercompare"}},[e._v("#")]),e._v(" semverCompare")]),e._v(" "),o("p",[e._v("A more robust comparison function is provided as "),o("code",[e._v("semverCompare")]),e._v(". This version\nsupports version ranges:")]),e._v(" "),o("ul",[o("li",[o("code",[e._v('semverCompare "1.2.3" "1.2.3"')]),e._v(" checks for an exact match")]),e._v(" "),o("li",[o("code",[e._v('semverCompare "^1.2.0" "1.2.3"')]),e._v(" checks that the major and minor versions match, and that the patch\nnumber of the second version is "),o("em",[e._v("greater than or equal to")]),e._v(" the first parameter.")])]),e._v(" "),o("p",[e._v("The SemVer functions use the "),o("a",{attrs:{href:"https://github.com/Masterminds/semver",target:"_blank",rel:"noopener noreferrer"}},[e._v("Masterminds semver library"),o("OutboundLink")],1),e._v(",\nfrom the creators of Sprig.")]),e._v(" "),o("h2",{attrs:{id:"basic-comparisons"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#basic-comparisons"}},[e._v("#")]),e._v(" Basic Comparisons")]),e._v(" "),o("p",[e._v("There are two elements to the comparisons. First, a comparison string is a list\nof space or comma separated AND comparisons. These are then separated by || (OR)\ncomparisons. For example, "),o("code",[e._v('">= 1.2 < 3.0.0 || >= 4.2.3"')]),e._v(" is looking for a\ncomparison that's greater than or equal to 1.2 and less than 3.0.0 or is\ngreater than or equal to 4.2.3.")]),e._v(" "),o("p",[e._v("The basic comparisons are:")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("=")]),e._v(": equal (aliased to no operator)")]),e._v(" "),o("li",[o("code",[e._v("!=")]),e._v(": not equal")]),e._v(" "),o("li",[o("code",[e._v(">")]),e._v(": greater than")]),e._v(" "),o("li",[o("code",[e._v("<")]),e._v(": less than")]),e._v(" "),o("li",[o("code",[e._v(">=")]),e._v(": greater than or equal to")]),e._v(" "),o("li",[o("code",[e._v("<=")]),e._v(": less than or equal to")])]),e._v(" "),o("p",[o("em",[e._v("Note, according to the Semantic Version specification pre-releases may not be\nAPI compliant with their release counterpart. It says,")])]),e._v(" "),o("h2",{attrs:{id:"working-with-prerelease-versions"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#working-with-prerelease-versions"}},[e._v("#")]),e._v(" Working With Prerelease Versions")]),e._v(" "),o("p",[e._v("Pre-releases, for those not familiar with them, are used for software releases\nprior to stable or generally available releases. Examples of prereleases include\ndevelopment, alpha, beta, and release candidate releases. A prerelease may be\na version such as "),o("code",[e._v("1.2.3-beta.1")]),e._v(" while the stable release would be "),o("code",[e._v("1.2.3")]),e._v(". In the\norder of precedence, prereleases come before their associated releases. In this\nexample "),o("code",[e._v("1.2.3-beta.1 < 1.2.3")]),e._v(".")]),e._v(" "),o("p",[e._v("According to the Semantic Version specification prereleases may not be\nAPI compliant with their release counterpart. It says,")]),e._v(" "),o("blockquote",[o("p",[e._v("A pre-release version indicates that the version is unstable and might not satisfy the intended compatibility requirements as denoted by its associated normal version.")])]),e._v(" "),o("p",[e._v("SemVer comparisons using constraints without a prerelease comparator will skip\nprerelease versions. For example, "),o("code",[e._v(">=1.2.3")]),e._v(" will skip prereleases when looking\nat a list of releases while "),o("code",[e._v(">=1.2.3-0")]),e._v(" will evaluate and find prereleases.")]),e._v(" "),o("p",[e._v("The reason for the "),o("code",[e._v("0")]),e._v(" as a pre-release version in the example comparison is\nbecause pre-releases can only contain ASCII alphanumerics and hyphens (along with\n"),o("code",[e._v(".")]),e._v(" separators), per the spec. Sorting happens in ASCII sort order, again per the\nspec. The lowest character is a "),o("code",[e._v("0")]),e._v(" in ASCII sort order\n(see an "),o("a",{attrs:{href:"http://www.asciitable.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("ASCII Table"),o("OutboundLink")],1),e._v(")")]),e._v(" "),o("p",[e._v("Understanding ASCII sort ordering is important because A-Z comes before a-z. That\nmeans "),o("code",[e._v(">=1.2.3-BETA")]),e._v(" will return "),o("code",[e._v("1.2.3-alpha")]),e._v(". What you might expect from case\nsensitivity doesn't apply here. This is due to ASCII sort ordering which is what\nthe spec specifies.")]),e._v(" "),o("h2",{attrs:{id:"hyphen-range-comparisons"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#hyphen-range-comparisons"}},[e._v("#")]),e._v(" Hyphen Range Comparisons")]),e._v(" "),o("p",[e._v("There are multiple methods to handle ranges and the first is hyphens ranges.\nThese look like:")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("1.2 - 1.4.5")]),e._v(" which is equivalent to "),o("code",[e._v(">= 1.2 <= 1.4.5")])]),e._v(" "),o("li",[o("code",[e._v("2.3.4 - 4.5")]),e._v(" which is equivalent to "),o("code",[e._v(">= 2.3.4 <= 4.5")])])]),e._v(" "),o("h2",{attrs:{id:"wildcards-in-comparisons"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#wildcards-in-comparisons"}},[e._v("#")]),e._v(" Wildcards In Comparisons")]),e._v(" "),o("p",[e._v("The "),o("code",[e._v("x")]),e._v(", "),o("code",[e._v("X")]),e._v(", and "),o("code",[e._v("*")]),e._v(" characters can be used as a wildcard character. This works\nfor all comparison operators. When used on the "),o("code",[e._v("=")]),e._v(" operator it falls\nback to the patch level comparison (see tilde below). For example,")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("1.2.x")]),e._v(" is equivalent to "),o("code",[e._v(">= 1.2.0, < 1.3.0")])]),e._v(" "),o("li",[o("code",[e._v(">= 1.2.x")]),e._v(" is equivalent to "),o("code",[e._v(">= 1.2.0")])]),e._v(" "),o("li",[o("code",[e._v("<= 2.x")]),e._v(" is equivalent to "),o("code",[e._v("< 3")])]),e._v(" "),o("li",[o("code",[e._v("*")]),e._v(" is equivalent to "),o("code",[e._v(">= 0.0.0")])])]),e._v(" "),o("h2",{attrs:{id:"tilde-range-comparisons-patch"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#tilde-range-comparisons-patch"}},[e._v("#")]),e._v(" Tilde Range Comparisons (Patch)")]),e._v(" "),o("p",[e._v("The tilde ("),o("code",[e._v("~")]),e._v(") comparison operator is for patch level ranges when a minor\nversion is specified and major level changes when the minor number is missing.\nFor example,")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("~1.2.3")]),e._v(" is equivalent to "),o("code",[e._v(">= 1.2.3, < 1.3.0")])]),e._v(" "),o("li",[o("code",[e._v("~1")]),e._v(" is equivalent to "),o("code",[e._v(">= 1, < 2")])]),e._v(" "),o("li",[o("code",[e._v("~2.3")]),e._v(" is equivalent to "),o("code",[e._v(">= 2.3, < 2.4")])]),e._v(" "),o("li",[o("code",[e._v("~1.2.x")]),e._v(" is equivalent to "),o("code",[e._v(">= 1.2.0, < 1.3.0")])]),e._v(" "),o("li",[o("code",[e._v("~1.x")]),e._v(" is equivalent to "),o("code",[e._v(">= 1, < 2")])])]),e._v(" "),o("h2",{attrs:{id:"caret-range-comparisons-major"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#caret-range-comparisons-major"}},[e._v("#")]),e._v(" Caret Range Comparisons (Major)")]),e._v(" "),o("p",[e._v("The caret ("),o("code",[e._v("^")]),e._v(") comparison operator is for major level changes once a stable\n(1.0.0) release has occurred. Prior to a 1.0.0 release the minor versions acts\nas the API stability level. This is useful when comparisons of API versions as a\nmajor change is API breaking. For example,")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("^1.2.3")]),e._v(" is equivalent to "),o("code",[e._v(">= 1.2.3, < 2.0.0")])]),e._v(" "),o("li",[o("code",[e._v("^1.2.x")]),e._v(" is equivalent to "),o("code",[e._v(">= 1.2.0, < 2.0.0")])]),e._v(" "),o("li",[o("code",[e._v("^2.3")]),e._v(" is equivalent to "),o("code",[e._v(">= 2.3, < 3")])]),e._v(" "),o("li",[o("code",[e._v("^2.x")]),e._v(" is equivalent to "),o("code",[e._v(">= 2.0.0, < 3")])]),e._v(" "),o("li",[o("code",[e._v("^0.2.3")]),e._v(" is equivalent to "),o("code",[e._v(">=0.2.3 <0.3.0")])]),e._v(" "),o("li",[o("code",[e._v("^0.2")]),e._v(" is equivalent to "),o("code",[e._v(">=0.2.0 <0.3.0")])]),e._v(" "),o("li",[o("code",[e._v("^0.0.3")]),e._v(" is equivalent to "),o("code",[e._v(">=0.0.3 <0.0.4")])]),e._v(" "),o("li",[o("code",[e._v("^0.0")]),e._v(" is equivalent to "),o("code",[e._v(">=0.0.0 <0.1.0")])]),e._v(" "),o("li",[o("code",[e._v("^0")]),e._v(" is equivalent to "),o("code",[e._v(">=0.0.0 <1.0.0")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);