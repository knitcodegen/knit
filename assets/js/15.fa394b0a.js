(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{411:function(e,t,a){"use strict";a.r(t);var i=a(56),r=Object(i.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"options"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#options"}},[e._v("#")]),e._v(" Options")]),e._v(" "),a("p",[e._v("Whether you are using "),a("code",[e._v("knit")]),e._v(" from the command line or embedded in a file, the behaviour of a code generator is defined using a series of key-value option pairs.")]),e._v(" "),a("h2",{attrs:{id:"input"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#input"}},[e._v("#")]),e._v(" "),a("code",[e._v("input")])]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("input")]),e._v(" option specifies an input file or literal. This option is "),a("em",[e._v("required")]),e._v(" for all generators.")]),e._v(" "),a("h3",{attrs:{id:"file"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#file"}},[e._v("#")]),e._v(" File")]),e._v(" "),a("p",[e._v("An "),a("code",[e._v("input")]),e._v(" can be defined as a path to a file. The two default input file types are "),a("code",[e._v("json")]),e._v(" and "),a("code",[e._v("yaml")]),e._v(".")]),e._v(" "),a("p",[e._v("Relative paths to files are resolved using the directory in which "),a("code",[e._v("knit")]),e._v(" has been executed.")]),e._v(" "),a("p",[e._v("Currently remote file loading is not available but is planned for a future release. Please follow "),a("a",{attrs:{href:"https://github.com/knitcodegen/knit/issues/5",target:"_blank",rel:"noopener noreferrer"}},[e._v("#5"),a("OutboundLink")],1),e._v(" for details and updates.")]),e._v(" "),a("h3",{attrs:{id:"literal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#literal"}},[e._v("#")]),e._v(" Literal")]),e._v(" "),a("p",[e._v("An "),a("code",[e._v("input")]),e._v(" can also be defined as a literal. A literal is a multiline string surrounded by backticks prefixed by the extension of the file the text would otherwise reside in.")]),e._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('yaml`\nschema:\n  paths:\n    /dogs:\n      post:\n        summary: "Creates a \\`dog\\`"\n        operationId: CreateDog\n`\n')])])]),a("p",[e._v('Literals will be fed to their respective loader "literally", so be weary of spacing and formatting for input types like '),a("code",[e._v("yaml")]),e._v(".")]),e._v(" "),a("p",[e._v("Backtick characters in literals can be escaped using a prefixed backslash.")]),e._v(" "),a("h2",{attrs:{id:"loader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#loader"}},[e._v("#")]),e._v(" "),a("code",[e._v("loader")])]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("loader")]),e._v(" option specifies the loader used to load the input file.")]),e._v(" "),a("p",[e._v("These are the available loader types:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("yml")]),e._v(" / "),a("code",[e._v("yaml")])]),e._v(" "),a("li",[a("code",[e._v("json")])]),e._v(" "),a("li",[a("code",[e._v("openapi3")])])]),e._v(" "),a("p",[e._v("These are the planned loader types:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("protobuf")]),e._v(" (follow "),a("a",{attrs:{href:"https://github.com/knitcodegen/knit/issues/1",target:"_blank",rel:"noopener noreferrer"}},[e._v("#1"),a("OutboundLink")],1),e._v(")")]),e._v(" "),a("li",[a("code",[e._v("graphql")]),e._v(" (follow "),a("a",{attrs:{href:"https://github.com/knitcodegen/knit/issues/2",target:"_blank",rel:"noopener noreferrer"}},[e._v("#2"),a("OutboundLink")],1),e._v(")")])]),e._v(" "),a("p",[e._v("Sometimes the loader type can be inferred from the input file type but it is important to understand when to be explicit.")]),e._v(" "),a("p",[e._v("As an example, technically an openapi specification could be loaded by the "),a("code",[e._v("yaml")]),e._v(" loader, however, more specialized loaders like "),a("code",[e._v("openapi3")]),e._v(" know how to resolve file references and validate schema adherence.")]),e._v(" "),a("h2",{attrs:{id:"template"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#template"}},[e._v("#")]),e._v(" "),a("code",[e._v("template")])]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("template")]),e._v(" option specifies a template file or literal. This option is "),a("em",[e._v("required")]),e._v(" for all generators.")]),e._v(" "),a("p",[e._v("Currently the only supported template engines are the ones native to Go:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("text/template")])]),e._v(" "),a("li",[a("code",[e._v("html/template")])])]),e._v(" "),a("h3",{attrs:{id:"file-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#file-2"}},[e._v("#")]),e._v(" File")]),e._v(" "),a("h3",{attrs:{id:"literal-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#literal-2"}},[e._v("#")]),e._v(" Literal")]),e._v(" "),a("p",[e._v("A "),a("code",[e._v("template")]),e._v(" can also be defined as a literal. A literal is a multiline string surrounded by backticks prefixed by the extension of the file the text would otherwise reside in.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('tmpl`\n  type Generated struct {\n    {{ range $k, $v := .Map }} \n      {{ $k }} string \\`json:"{{ $v }}"\\`\n    {{end}}\n  }\n`\n')])])]),a("p",[e._v("Backtick characters in literals can be escaped using a prefixed backslash.")])])}),[],!1,null,null,null);t.default=r.exports}}]);