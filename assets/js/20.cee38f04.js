(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{417:function(e,t,a){"use strict";a.r(t);var s=a(56),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"dictionaries-and-dict-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dictionaries-and-dict-functions"}},[e._v("#")]),e._v(" Dictionaries and Dict Functions")]),e._v(" "),a("p",[e._v("Sprig provides a key/value storage type called a "),a("code",[e._v("dict")]),e._v(' (short for "dictionary",\nas in Python). A '),a("code",[e._v("dict")]),e._v(" is an "),a("em",[e._v("unorder")]),e._v(" type.")]),e._v(" "),a("p",[e._v("The key to a dictionary "),a("strong",[e._v("must be a string")]),e._v(". However, the value can be any\ntype, even another "),a("code",[e._v("dict")]),e._v(" or "),a("code",[e._v("list")]),e._v(".")]),e._v(" "),a("p",[e._v("Unlike "),a("code",[e._v("list")]),e._v("s, "),a("code",[e._v("dict")]),e._v("s are not immutable. The "),a("code",[e._v("set")]),e._v(" and "),a("code",[e._v("unset")]),e._v(" functions will\nmodify the contents of a dictionary.")]),e._v(" "),a("h2",{attrs:{id:"dict"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dict"}},[e._v("#")]),e._v(" dict")]),e._v(" "),a("p",[e._v("Creating dictionaries is done by calling the "),a("code",[e._v("dict")]),e._v(" function and passing it a\nlist of pairs.")]),e._v(" "),a("p",[e._v("The following creates a dictionary with three items:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('$myDict := dict "name1" "value1" "name2" "value2" "name3" "value 3"\n')])])]),a("h2",{attrs:{id:"get"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get"}},[e._v("#")]),e._v(" get")]),e._v(" "),a("p",[e._v("Given a map and a key, get the value from the map.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('get $myDict "key1"\n')])])]),a("p",[e._v("The above returns "),a("code",[e._v('"value1"')])]),e._v(" "),a("p",[e._v("Note that if the key is not found, this operation will simply return "),a("code",[e._v('""')]),e._v(". No error\nwill be generated.")]),e._v(" "),a("h2",{attrs:{id:"set"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[e._v("#")]),e._v(" set")]),e._v(" "),a("p",[e._v("Use "),a("code",[e._v("set")]),e._v(" to add a new key/value pair to a dictionary.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('$_ := set $myDict "name4" "value4"\n')])])]),a("p",[e._v("Note that "),a("code",[e._v("set")]),e._v(" "),a("em",[e._v("returns the dictionary")]),e._v(" (a requirement of Go template functions),\nso you may need to trap the value as done above with the "),a("code",[e._v("$_")]),e._v(" assignment.")]),e._v(" "),a("h2",{attrs:{id:"unset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unset"}},[e._v("#")]),e._v(" unset")]),e._v(" "),a("p",[e._v("Given a map and a key, delete the key from the map.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('$_ := unset $myDict "name4"\n')])])]),a("p",[e._v("As with "),a("code",[e._v("set")]),e._v(", this returns the dictionary.")]),e._v(" "),a("p",[e._v("Note that if the key is not found, this operation will simply return. No error\nwill be generated.")]),e._v(" "),a("h2",{attrs:{id:"haskey"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#haskey"}},[e._v("#")]),e._v(" hasKey")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("hasKey")]),e._v(" function returns "),a("code",[e._v("true")]),e._v(" if the given dict contains the given key.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('hasKey $myDict "name1"\n')])])]),a("p",[e._v("If the key is not found, this returns "),a("code",[e._v("false")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"pluck"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pluck"}},[e._v("#")]),e._v(" pluck")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("pluck")]),e._v(" function makes it possible to give one key and multiple maps, and\nget a list of all of the matches:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('pluck "name1" $myDict $myOtherDict\n')])])]),a("p",[e._v("The above will return a "),a("code",[e._v("list")]),e._v(" containing every found value ("),a("code",[e._v("[value1 otherValue1]")]),e._v(").")]),e._v(" "),a("p",[e._v("If the give key is "),a("em",[e._v("not found")]),e._v(" in a map, that map will not have an item in the\nlist (and the length of the returned list will be less than the number of dicts\nin the call to "),a("code",[e._v("pluck")]),e._v(".")]),e._v(" "),a("p",[e._v("If the key is "),a("em",[e._v("found")]),e._v(" but the value is an empty value, that value will be\ninserted.")]),e._v(" "),a("p",[e._v("A common idiom in Sprig templates is to uses "),a("code",[e._v("pluck... | first")]),e._v(" to get the first\nmatching key out of a collection of dictionaries.")]),e._v(" "),a("h2",{attrs:{id:"dig"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dig"}},[e._v("#")]),e._v(" dig")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("dig")]),e._v(" function traverses a nested set of dicts, selecting keys from a list\nof values. It returns a default value if any of the keys are not found at the\nassociated dict.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('dig "user" "role" "humanName" "guest" $dict\n')])])]),a("p",[e._v("Given a dict structured like")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('{\n  user: {\n    role: {\n      humanName: "curator"\n    }\n  }\n}\n')])])]),a("p",[e._v("the above would return "),a("code",[e._v('"curator"')]),e._v(". If the dict lacked even a "),a("code",[e._v("user")]),e._v(" field,\nthe result would be "),a("code",[e._v('"guest"')]),e._v(".")]),e._v(" "),a("p",[e._v("Dig can be very useful in cases where you'd like to avoid guard clauses,\nespecially since Go's template package's "),a("code",[e._v("and")]),e._v(" doesn't shortcut. For instance\n"),a("code",[e._v("and a.maybeNil a.maybeNil.iNeedThis")]),e._v(" will always evaluate\n"),a("code",[e._v("a.maybeNil.iNeedThis")]),e._v(", and panic if "),a("code",[e._v("a")]),e._v(" lacks a "),a("code",[e._v("maybeNil")]),e._v(" field.)")]),e._v(" "),a("p",[a("code",[e._v("dig")]),e._v(" accepts its dict argument last in order to support pipelining. For instance:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('merge a b c | dig "one" "two" "three" "<missing>"\n')])])]),a("h2",{attrs:{id:"merge-mustmerge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#merge-mustmerge"}},[e._v("#")]),e._v(" merge, mustMerge")]),e._v(" "),a("p",[e._v("Merge two or more dictionaries into one, giving precedence to the dest dictionary:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$newdict := merge $dest $source1 $source2\n")])])]),a("p",[e._v("This is a deep merge operation but not a deep copy operation. Nested objects that\nare merged are the same instance on both dicts. If you want a deep copy along\nwith the merge than use the "),a("code",[e._v("deepCopy")]),e._v(" function along with merging. For example,")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("deepCopy $source | merge $dest\n")])])]),a("p",[a("code",[e._v("mustMerge")]),e._v(" will return an error in case of unsuccessful merge.")]),e._v(" "),a("h2",{attrs:{id:"mergeoverwrite-mustmergeoverwrite"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mergeoverwrite-mustmergeoverwrite"}},[e._v("#")]),e._v(" mergeOverwrite, mustMergeOverwrite")]),e._v(" "),a("p",[e._v("Merge two or more dictionaries into one, giving precedence from "),a("strong",[e._v("right to left")]),e._v(", effectively\noverwriting values in the dest dictionary:")]),e._v(" "),a("p",[e._v("Given:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("dst:\n  default: default\n  overwrite: me\n  key: true\n\nsrc:\n  overwrite: overwritten\n  key: false\n")])])]),a("p",[e._v("will result in:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("newdict:\n  default: default\n  overwrite: overwritten\n  key: false\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$newdict := mergeOverwrite $dest $source1 $source2\n")])])]),a("p",[e._v("This is a deep merge operation but not a deep copy operation. Nested objects that\nare merged are the same instance on both dicts. If you want a deep copy along\nwith the merge than use the "),a("code",[e._v("deepCopy")]),e._v(" function along with merging. For example,")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("deepCopy $source | mergeOverwrite $dest\n")])])]),a("p",[a("code",[e._v("mustMergeOverwrite")]),e._v(" will return an error in case of unsuccessful merge.")]),e._v(" "),a("h2",{attrs:{id:"keys"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keys"}},[e._v("#")]),e._v(" keys")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("keys")]),e._v(" function will return a "),a("code",[e._v("list")]),e._v(" of all of the keys in one or more "),a("code",[e._v("dict")]),e._v("\ntypes. Since a dictionary is "),a("em",[e._v("unordered")]),e._v(", the keys will not be in a predictable order.\nThey can be sorted with "),a("code",[e._v("sortAlpha")]),e._v(".")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("keys $myDict | sortAlpha\n")])])]),a("p",[e._v("When supplying multiple dictionaries, the keys will be concatenated. Use the "),a("code",[e._v("uniq")]),e._v("\nfunction along with "),a("code",[e._v("sortAlpha")]),e._v(" to get a unqiue, sorted list of keys.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("keys $myDict $myOtherDict | uniq | sortAlpha\n")])])]),a("h2",{attrs:{id:"pick"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pick"}},[e._v("#")]),e._v(" pick")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("pick")]),e._v(" function selects just the given keys out of a dictionary, creating a\nnew "),a("code",[e._v("dict")]),e._v(".")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('$new := pick $myDict "name1" "name2"\n')])])]),a("p",[e._v("The above returns "),a("code",[e._v("{name1: value1, name2: value2}")])]),e._v(" "),a("h2",{attrs:{id:"omit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#omit"}},[e._v("#")]),e._v(" omit")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("omit")]),e._v(" function is similar to "),a("code",[e._v("pick")]),e._v(", except it returns a new "),a("code",[e._v("dict")]),e._v(" with all\nthe keys that "),a("em",[e._v("do not")]),e._v(" match the given keys.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('$new := omit $myDict "name1" "name3"\n')])])]),a("p",[e._v("The above returns "),a("code",[e._v("{name2: value2}")])]),e._v(" "),a("h2",{attrs:{id:"values"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#values"}},[e._v("#")]),e._v(" values")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("values")]),e._v(" function is similar to "),a("code",[e._v("keys")]),e._v(", except it returns a new "),a("code",[e._v("list")]),e._v(" with\nall the values of the source "),a("code",[e._v("dict")]),e._v(" (only one dictionary is supported).")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$vals := values $myDict\n")])])]),a("p",[e._v("The above returns "),a("code",[e._v('list["value1", "value2", "value 3"]')]),e._v(". Note that the "),a("code",[e._v("values")]),e._v("\nfunction gives no guarantees about the result ordering- if you care about this,\nthen use "),a("code",[e._v("sortAlpha")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"deepcopy-mustdeepcopy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deepcopy-mustdeepcopy"}},[e._v("#")]),e._v(" deepCopy, mustDeepCopy")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("deepCopy")]),e._v(" and "),a("code",[e._v("mustDeepCopy")]),e._v(" functions takes a value and makes a deep copy\nof the value. This includes dicts and other structures. "),a("code",[e._v("deepCopy")]),e._v(" panics\nwhen there is a problem while "),a("code",[e._v("mustDeepCopy")]),e._v(" returns an error to the template\nsystem when there is an error.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('dict "a" 1 "b" 2 | deepCopy\n')])])]),a("h2",{attrs:{id:"a-note-on-dict-internals"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#a-note-on-dict-internals"}},[e._v("#")]),e._v(" A Note on Dict Internals")]),e._v(" "),a("p",[e._v("A "),a("code",[e._v("dict")]),e._v(" is implemented in Go as a "),a("code",[e._v("map[string]interface{}")]),e._v(". Go developers can\npass "),a("code",[e._v("map[string]interface{}")]),e._v(" values into the context to make them available\nto templates as "),a("code",[e._v("dict")]),e._v("s.")])])}),[],!1,null,null,null);t.default=n.exports}}]);