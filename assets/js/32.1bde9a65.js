(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{429:function(t,a,s){"use strict";s.r(a);var e=s(56),i=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"string-slice-functions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string-slice-functions"}},[t._v("#")]),t._v(" String Slice Functions")]),t._v(" "),s("p",[t._v("These function operate on or generate slices of strings. In Go, a slice is a\ngrowable array. In Sprig, it's a special case of a "),s("code",[t._v("list")]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"join"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#join"}},[t._v("#")]),t._v(" join")]),t._v(" "),s("p",[t._v("Join a list of strings into a single string, with the given separator.")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('list "hello" "world" | join "_"\n')])])]),s("p",[t._v("The above will produce "),s("code",[t._v("hello_world")])]),t._v(" "),s("p",[s("code",[t._v("join")]),t._v(" will try to convert non-strings to a string value:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('list 1 2 3 | join "+"\n')])])]),s("p",[t._v("The above will produce "),s("code",[t._v("1+2+3")])]),t._v(" "),s("h2",{attrs:{id:"splitlist-and-split"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#splitlist-and-split"}},[t._v("#")]),t._v(" splitList and split")]),t._v(" "),s("p",[t._v("Split a string into a list of strings:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('splitList "$" "foo$bar$baz"\n')])])]),s("p",[t._v("The above will return "),s("code",[t._v("[foo bar baz]")])]),t._v(" "),s("p",[t._v("The older "),s("code",[t._v("split")]),t._v(" function splits a string into a "),s("code",[t._v("dict")]),t._v(". It is designed to make\nit easy to use template dot notation for accessing members:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('$a := split "$" "foo$bar$baz"\n')])])]),s("p",[t._v("The above produces a map with index keys. "),s("code",[t._v("{_0: foo, _1: bar, _2: baz}")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$a._0\n")])])]),s("p",[t._v("The above produces "),s("code",[t._v("foo")])]),t._v(" "),s("h2",{attrs:{id:"splitn"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#splitn"}},[t._v("#")]),t._v(" splitn")]),t._v(" "),s("p",[s("code",[t._v("splitn")]),t._v(" function splits a string into a "),s("code",[t._v("dict")]),t._v(". It is designed to make\nit easy to use template dot notation for accessing members:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('$a := splitn "$" 2 "foo$bar$baz"\n')])])]),s("p",[t._v("The above produces a map with index keys. "),s("code",[t._v("{_0: foo, _1: bar$baz}")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$a._0\n")])])]),s("p",[t._v("The above produces "),s("code",[t._v("foo")])]),t._v(" "),s("h2",{attrs:{id:"sortalpha"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sortalpha"}},[t._v("#")]),t._v(" sortAlpha")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("sortAlpha")]),t._v(" function sorts a list of strings into alphabetical (lexicographical)\norder.")]),t._v(" "),s("p",[t._v("It does "),s("em",[t._v("not")]),t._v(" sort in place, but returns a sorted copy of the list, in keeping\nwith the immutability of lists.")])])}),[],!1,null,null,null);a.default=i.exports}}]);