(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{430:function(e,a,t){"use strict";t.r(a);var s=t(56),r=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"string-functions"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string-functions"}},[e._v("#")]),e._v(" String Functions")]),e._v(" "),t("p",[e._v("Sprig has a number of string manipulation functions.")]),e._v(" "),t("h2",{attrs:{id:"trim"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#trim"}},[e._v("#")]),e._v(" trim")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("trim")]),e._v(" function removes space from either side of a string:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('trim "   hello    "\n')])])]),t("p",[e._v("The above produces "),t("code",[e._v("hello")])]),e._v(" "),t("h2",{attrs:{id:"trimall"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#trimall"}},[e._v("#")]),e._v(" trimAll")]),e._v(" "),t("p",[e._v("Remove given characters from the front or back of a string:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('trimAll "$" "$5.00"\n')])])]),t("p",[e._v("The above returns "),t("code",[e._v("5.00")]),e._v(" (as a string).")]),e._v(" "),t("h2",{attrs:{id:"trimsuffix"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#trimsuffix"}},[e._v("#")]),e._v(" trimSuffix")]),e._v(" "),t("p",[e._v("Trim just the suffix from a string:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('trimSuffix "-" "hello-"\n')])])]),t("p",[e._v("The above returns "),t("code",[e._v("hello")])]),e._v(" "),t("h2",{attrs:{id:"trimprefix"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#trimprefix"}},[e._v("#")]),e._v(" trimPrefix")]),e._v(" "),t("p",[e._v("Trim just the prefix from a string:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('trimPrefix "-" "-hello"\n')])])]),t("p",[e._v("The above returns "),t("code",[e._v("hello")])]),e._v(" "),t("h2",{attrs:{id:"upper"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#upper"}},[e._v("#")]),e._v(" upper")]),e._v(" "),t("p",[e._v("Convert the entire string to uppercase:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('upper "hello"\n')])])]),t("p",[e._v("The above returns "),t("code",[e._v("HELLO")])]),e._v(" "),t("h2",{attrs:{id:"lower"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lower"}},[e._v("#")]),e._v(" lower")]),e._v(" "),t("p",[e._v("Convert the entire string to lowercase:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('lower "HELLO"\n')])])]),t("p",[e._v("The above returns "),t("code",[e._v("hello")])]),e._v(" "),t("h2",{attrs:{id:"title"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#title"}},[e._v("#")]),e._v(" title")]),e._v(" "),t("p",[e._v("Convert to title case:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('title "hello world"\n')])])]),t("p",[e._v("The above returns "),t("code",[e._v("Hello World")])]),e._v(" "),t("h2",{attrs:{id:"untitle"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#untitle"}},[e._v("#")]),e._v(" untitle")]),e._v(" "),t("p",[e._v("Remove title casing. "),t("code",[e._v('untitle "Hello World"')]),e._v(" produces "),t("code",[e._v("hello world")]),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"repeat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#repeat"}},[e._v("#")]),e._v(" repeat")]),e._v(" "),t("p",[e._v("Repeat a string multiple times:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('repeat 3 "hello"\n')])])]),t("p",[e._v("The above returns "),t("code",[e._v("hellohellohello")])]),e._v(" "),t("h2",{attrs:{id:"substr"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#substr"}},[e._v("#")]),e._v(" substr")]),e._v(" "),t("p",[e._v("Get a substring from a string. It takes three parameters:")]),e._v(" "),t("ul",[t("li",[e._v("start (int)")]),e._v(" "),t("li",[e._v("end (int)")]),e._v(" "),t("li",[e._v("string (string)")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('substr 0 5 "hello world"\n')])])]),t("p",[e._v("The above returns "),t("code",[e._v("hello")])]),e._v(" "),t("h2",{attrs:{id:"nospace"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nospace"}},[e._v("#")]),e._v(" nospace")]),e._v(" "),t("p",[e._v("Remove all whitespace from a string.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('nospace "hello w o r l d"\n')])])]),t("p",[e._v("The above returns "),t("code",[e._v("helloworld")])]),e._v(" "),t("h2",{attrs:{id:"trunc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#trunc"}},[e._v("#")]),e._v(" trunc")]),e._v(" "),t("p",[e._v("Truncate a string (and add no suffix)")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('trunc 5 "hello world"\n')])])]),t("p",[e._v("The above produces "),t("code",[e._v("hello")]),e._v(".")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('trunc -5 "hello world"\n')])])]),t("p",[e._v("The above produces "),t("code",[e._v("world")]),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"abbrev"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#abbrev"}},[e._v("#")]),e._v(" abbrev")]),e._v(" "),t("p",[e._v("Truncate a string with ellipses ("),t("code",[e._v("...")]),e._v(")")]),e._v(" "),t("p",[e._v("Parameters:")]),e._v(" "),t("ul",[t("li",[e._v("max length")]),e._v(" "),t("li",[e._v("the string")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('abbrev 5 "hello world"\n')])])]),t("p",[e._v("The above returns "),t("code",[e._v("he...")]),e._v(", since it counts the width of the ellipses against the\nmaximum length.")]),e._v(" "),t("h2",{attrs:{id:"abbrevboth"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#abbrevboth"}},[e._v("#")]),e._v(" abbrevboth")]),e._v(" "),t("p",[e._v("Abbreviate both sides:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('abbrevboth 5 10 "1234 5678 9123"\n')])])]),t("p",[e._v("the above produces "),t("code",[e._v("...5678...")])]),e._v(" "),t("p",[e._v("It takes:")]),e._v(" "),t("ul",[t("li",[e._v("left offset")]),e._v(" "),t("li",[e._v("max length")]),e._v(" "),t("li",[e._v("the string")])]),e._v(" "),t("h2",{attrs:{id:"initials"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#initials"}},[e._v("#")]),e._v(" initials")]),e._v(" "),t("p",[e._v("Given multiple words, take the first letter of each word and combine.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('initials "First Try"\n')])])]),t("p",[e._v("The above returns "),t("code",[e._v("FT")])]),e._v(" "),t("h2",{attrs:{id:"randalphanum-randalpha-randnumeric-and-randascii"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#randalphanum-randalpha-randnumeric-and-randascii"}},[e._v("#")]),e._v(" randAlphaNum, randAlpha, randNumeric, and randAscii")]),e._v(" "),t("p",[e._v("These four functions generate cryptographically secure (uses "),t("code",[e._v("crypto/rand")]),e._v(")\nrandom strings, but with different base character sets:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("randAlphaNum")]),e._v(" uses "),t("code",[e._v("0-9a-zA-Z")])]),e._v(" "),t("li",[t("code",[e._v("randAlpha")]),e._v(" uses "),t("code",[e._v("a-zA-Z")])]),e._v(" "),t("li",[t("code",[e._v("randNumeric")]),e._v(" uses "),t("code",[e._v("0-9")])]),e._v(" "),t("li",[t("code",[e._v("randAscii")]),e._v(" uses all printable ASCII characters")])]),e._v(" "),t("p",[e._v("Each of them takes one parameter: the integer length of the string.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("randNumeric 3\n")])])]),t("p",[e._v("The above will produce a random string with three digits.")]),e._v(" "),t("h2",{attrs:{id:"wrap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#wrap"}},[e._v("#")]),e._v(" wrap")]),e._v(" "),t("p",[e._v("Wrap text at a given column count:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("wrap 80 $someText\n")])])]),t("p",[e._v("The above will wrap the string in "),t("code",[e._v("$someText")]),e._v(" at 80 columns.")]),e._v(" "),t("h2",{attrs:{id:"wrapwith"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#wrapwith"}},[e._v("#")]),e._v(" wrapWith")]),e._v(" "),t("p",[t("code",[e._v("wrapWith")]),e._v(" works as "),t("code",[e._v("wrap")]),e._v(", but lets you specify the string to wrap with.\n("),t("code",[e._v("wrap")]),e._v(" uses "),t("code",[e._v("\\n")]),e._v(")")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('wrapWith 5 "\\t" "Hello World"\n')])])]),t("p",[e._v("The above produces "),t("code",[e._v("hello world")]),e._v(" (where the whitespace is an ASCII tab\ncharacter)")]),e._v(" "),t("h2",{attrs:{id:"contains"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#contains"}},[e._v("#")]),e._v(" contains")]),e._v(" "),t("p",[e._v("Test to see if one string is contained inside of another:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('contains "cat" "catch"\n')])])]),t("p",[e._v("The above returns "),t("code",[e._v("true")]),e._v(" because "),t("code",[e._v("catch")]),e._v(" contains "),t("code",[e._v("cat")]),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"hasprefix-and-hassuffix"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hasprefix-and-hassuffix"}},[e._v("#")]),e._v(" hasPrefix and hasSuffix")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("hasPrefix")]),e._v(" and "),t("code",[e._v("hasSuffix")]),e._v(" functions test whether a string has a given\nprefix or suffix:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('hasPrefix "cat" "catch"\n')])])]),t("p",[e._v("The above returns "),t("code",[e._v("true")]),e._v(" because "),t("code",[e._v("catch")]),e._v(" has the prefix "),t("code",[e._v("cat")]),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"quote-and-squote"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#quote-and-squote"}},[e._v("#")]),e._v(" quote and squote")]),e._v(" "),t("p",[e._v("These functions wrap a string in double quotes ("),t("code",[e._v("quote")]),e._v(") or single quotes\n("),t("code",[e._v("squote")]),e._v(").")]),e._v(" "),t("h2",{attrs:{id:"cat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cat"}},[e._v("#")]),e._v(" cat")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("cat")]),e._v(" function concatenates multiple strings together into one, separating\nthem with spaces:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('cat "hello" "beautiful" "world"\n')])])]),t("p",[e._v("The above produces "),t("code",[e._v("hello beautiful world")])]),e._v(" "),t("h2",{attrs:{id:"indent"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#indent"}},[e._v("#")]),e._v(" indent")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("indent")]),e._v(" function indents every line in a given string to the specified\nindent width. This is useful when aligning multi-line strings:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("indent 4 $lots_of_text\n")])])]),t("p",[e._v("The above will indent every line of text by 4 space characters.")]),e._v(" "),t("h2",{attrs:{id:"nindent"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nindent"}},[e._v("#")]),e._v(" nindent")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("nindent")]),e._v(" function is the same as the indent function, but prepends a new\nline to the beginning of the string.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("nindent 4 $lots_of_text\n")])])]),t("p",[e._v("The above will indent every line of text by 4 space characters and add a new\nline to the beginning.")]),e._v(" "),t("h2",{attrs:{id:"replace"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#replace"}},[e._v("#")]),e._v(" replace")]),e._v(" "),t("p",[e._v("Perform simple string replacement.")]),e._v(" "),t("p",[e._v("It takes three arguments:")]),e._v(" "),t("ul",[t("li",[e._v("string to replace")]),e._v(" "),t("li",[e._v("string to replace with")]),e._v(" "),t("li",[e._v("source string")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('"I Am Henry VIII" | replace " " "-"\n')])])]),t("p",[e._v("The above will produce "),t("code",[e._v("I-Am-Henry-VIII")])]),e._v(" "),t("h2",{attrs:{id:"plural"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#plural"}},[e._v("#")]),e._v(" plural")]),e._v(" "),t("p",[e._v("Pluralize a string.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('len $fish | plural "one anchovy" "many anchovies"\n')])])]),t("p",[e._v("In the above, if the length of the string is 1, the first argument will be\nprinted ("),t("code",[e._v("one anchovy")]),e._v("). Otherwise, the second argument will be printed\n("),t("code",[e._v("many anchovies")]),e._v(").")]),e._v(" "),t("p",[e._v("The arguments are:")]),e._v(" "),t("ul",[t("li",[e._v("singular string")]),e._v(" "),t("li",[e._v("plural string")]),e._v(" "),t("li",[e._v("length integer")])]),e._v(" "),t("p",[e._v("NOTE: Sprig does not currently support languages with more complex pluralization\nrules. And "),t("code",[e._v("0")]),e._v(" is considered a plural because the English language treats it\nas such ("),t("code",[e._v("zero anchovies")]),e._v("). The Sprig developers are working on a solution for\nbetter internationalization.")]),e._v(" "),t("h2",{attrs:{id:"snakecase"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#snakecase"}},[e._v("#")]),e._v(" snakecase")]),e._v(" "),t("p",[e._v("Convert string from camelCase to snake_case.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('snakecase "FirstName"\n')])])]),t("p",[e._v("This above will produce "),t("code",[e._v("first_name")]),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"camelcase"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#camelcase"}},[e._v("#")]),e._v(" camelcase")]),e._v(" "),t("p",[e._v("Convert string from snake_case to CamelCase")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('camelcase "http_server"\n')])])]),t("p",[e._v("This above will produce "),t("code",[e._v("HttpServer")]),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"kebabcase"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kebabcase"}},[e._v("#")]),e._v(" kebabcase")]),e._v(" "),t("p",[e._v("Convert string from camelCase to kebab-case.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('kebabcase "FirstName"\n')])])]),t("p",[e._v("This above will produce "),t("code",[e._v("first-name")]),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"swapcase"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#swapcase"}},[e._v("#")]),e._v(" swapcase")]),e._v(" "),t("p",[e._v("Swap the case of a string using a word based algorithm.")]),e._v(" "),t("p",[e._v("Conversion algorithm:")]),e._v(" "),t("ul",[t("li",[e._v("Upper case character converts to Lower case")]),e._v(" "),t("li",[e._v("Title case character converts to Lower case")]),e._v(" "),t("li",[e._v("Lower case character after Whitespace or at start converts to Title case")]),e._v(" "),t("li",[e._v("Other Lower case character converts to Upper case")]),e._v(" "),t("li",[e._v("Whitespace is defined by unicode.IsSpace(char)")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('swapcase "This Is A.Test"\n')])])]),t("p",[e._v("This above will produce "),t("code",[e._v("tHIS iS a.tEST")]),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"shuffle"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#shuffle"}},[e._v("#")]),e._v(" shuffle")]),e._v(" "),t("p",[e._v("Shuffle a string.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('shuffle "hello"\n')])])]),t("p",[e._v("The above will randomize the letters in "),t("code",[e._v("hello")]),e._v(", perhaps producing "),t("code",[e._v("oelhl")]),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"regexmatch-mustregexmatch"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#regexmatch-mustregexmatch"}},[e._v("#")]),e._v(" regexMatch, mustRegexMatch")]),e._v(" "),t("p",[e._v("Returns true if the input string contains any match of the regular expression.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('regexMatch "^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}$" "test@acme.com"\n')])])]),t("p",[e._v("The above produces "),t("code",[e._v("true")])]),e._v(" "),t("p",[t("code",[e._v("regexMatch")]),e._v(" panics if there is a problem and "),t("code",[e._v("mustRegexMatch")]),e._v(" returns an error to the\ntemplate engine if there is a problem.")]),e._v(" "),t("h2",{attrs:{id:"regexfindall-mustregexfindall"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#regexfindall-mustregexfindall"}},[e._v("#")]),e._v(" regexFindAll, mustRegexFindAll")]),e._v(" "),t("p",[e._v("Returns a slice of all matches of the regular expression in the input string.\nThe last parameter n determines the number of substrings to return, where -1 means return all matches")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('regexFindAll "[2,4,6,8]" "123456789" -1\n')])])]),t("p",[e._v("The above produces "),t("code",[e._v("[2 4 6 8]")])]),e._v(" "),t("p",[t("code",[e._v("regexFindAll")]),e._v(" panics if there is a problem and "),t("code",[e._v("mustRegexFindAll")]),e._v(" returns an error to the\ntemplate engine if there is a problem.")]),e._v(" "),t("h2",{attrs:{id:"regexfind-mustregexfind"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#regexfind-mustregexfind"}},[e._v("#")]),e._v(" regexFind, mustRegexFind")]),e._v(" "),t("p",[e._v("Return the first (left most) match of the regular expression in the input string")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('regexFind "[a-zA-Z][1-9]" "abcd1234"\n')])])]),t("p",[e._v("The above produces "),t("code",[e._v("d1")])]),e._v(" "),t("p",[t("code",[e._v("regexFind")]),e._v(" panics if there is a problem and "),t("code",[e._v("mustRegexFind")]),e._v(" returns an error to the\ntemplate engine if there is a problem.")]),e._v(" "),t("h2",{attrs:{id:"regexreplaceall-mustregexreplaceall"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#regexreplaceall-mustregexreplaceall"}},[e._v("#")]),e._v(" regexReplaceAll, mustRegexReplaceAll")]),e._v(" "),t("p",[e._v("Returns a copy of the input string, replacing matches of the Regexp with the replacement string replacement.\nInside string replacement, $ signs are interpreted as in Expand, so for instance $1 represents the text of the first submatch")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('regexReplaceAll "a(x*)b" "-ab-axxb-" "${1}W"\n')])])]),t("p",[e._v("The above produces "),t("code",[e._v("-W-xxW-")])]),e._v(" "),t("p",[t("code",[e._v("regexReplaceAll")]),e._v(" panics if there is a problem and "),t("code",[e._v("mustRegexReplaceAll")]),e._v(" returns an error to the\ntemplate engine if there is a problem.")]),e._v(" "),t("h2",{attrs:{id:"regexreplaceallliteral-mustregexreplaceallliteral"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#regexreplaceallliteral-mustregexreplaceallliteral"}},[e._v("#")]),e._v(" regexReplaceAllLiteral, mustRegexReplaceAllLiteral")]),e._v(" "),t("p",[e._v("Returns a copy of the input string, replacing matches of the Regexp with the replacement string replacement\nThe replacement string is substituted directly, without using Expand")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('regexReplaceAllLiteral "a(x*)b" "-ab-axxb-" "${1}"\n')])])]),t("p",[e._v("The above produces "),t("code",[e._v("-${1}-${1}-")])]),e._v(" "),t("p",[t("code",[e._v("regexReplaceAllLiteral")]),e._v(" panics if there is a problem and "),t("code",[e._v("mustRegexReplaceAllLiteral")]),e._v(" returns an error to the\ntemplate engine if there is a problem.")]),e._v(" "),t("h2",{attrs:{id:"regexsplit-mustregexsplit"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#regexsplit-mustregexsplit"}},[e._v("#")]),e._v(" regexSplit, mustRegexSplit")]),e._v(" "),t("p",[e._v("Slices the input string into substrings separated by the expression and returns a slice of the substrings between those expression matches. The last parameter "),t("code",[e._v("n")]),e._v(" determines the number of substrings to return, where "),t("code",[e._v("-1")]),e._v(" means return all matches")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('regexSplit "z+" "pizza" -1\n')])])]),t("p",[e._v("The above produces "),t("code",[e._v("[pi a]")])]),e._v(" "),t("p",[t("code",[e._v("regexSplit")]),e._v(" panics if there is a problem and "),t("code",[e._v("mustRegexSplit")]),e._v(" returns an error to the\ntemplate engine if there is a problem.")]),e._v(" "),t("h2",{attrs:{id:"regexquotemeta"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#regexquotemeta"}},[e._v("#")]),e._v(" regexQuoteMeta")]),e._v(" "),t("p",[e._v("Returns a string that escapes all regular expression metacharacters inside the argument text;\nthe returned string is a regular expression matching the literal text.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('regexQuoteMeta "1.2.3"\n')])])]),t("p",[e._v("The above produces "),t("code",[e._v("1\\.2\\.3")])]),e._v(" "),t("h2",{attrs:{id:"see-also"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#see-also"}},[e._v("#")]),e._v(" See Also...")]),e._v(" "),t("p",[e._v("The "),t("RouterLink",{attrs:{to:"/docs/sprig/conversion.html"}},[e._v("Conversion Functions")]),e._v(" contain functions for converting\nstrings. The "),t("RouterLink",{attrs:{to:"/docs/sprig/string_slice.html"}},[e._v("String Slice Functions")]),e._v(" contains functions\nfor working with an array of strings.")],1)])}),[],!1,null,null,null);a.default=r.exports}}]);